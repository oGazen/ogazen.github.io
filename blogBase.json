{
    "singlePage": [],
    "startSite": "",
    "filingNum": "",
    "onePageListNum": 15,
    "commentLabelColor": "#006b75",
    "yearColorList": [
        "#bc4c00",
        "#0969da",
        "#1f883d",
        "#A333D0"
    ],
    "i18n": "CN",
    "themeMode": "manual",
    "dayTheme": "light",
    "nightTheme": "dark",
    "urlMode": "pinyin",
    "script": "",
    "style": "",
    "head": "",
    "indexScript": "",
    "indexStyle": "",
    "bottomText": "",
    "showPostSource": 1,
    "iconList": {
        "GFMeditor": "M14.85 3c.63 0 1.15.52 1.14 1.15v7.7c0 .63-.51 1.15-1.15 1.15H1.15C.52 13 0 12.48 0 11.84V4.15C0 3.52.52 3 1.15 3ZM9 11V5H7L5.5 7 4 5H2v6h2V8l1.5 1.92L7 8v3Zm2.99.5L14.5 8H13V5h-2v3H9.5Z"
    },
    "UTC": 8,
    "rssSplit": "sentence",
    "exlink": {
        "GFMeditor": "https://ogazen.github.io/gfmeditor"
    },
    "needComment": 1,
    "allHead": "",
    "title": "Gazen\u7684\u4e2a\u4eba\u535a\u5ba2",
    "subTitle": "\u6b22\u8fce",
    "avatarUrl": "https://avatars.githubusercontent.com/u/68213482?v=4",
    "GMEEK_VERSION": "last",
    "postListJson": {
        "P1": {
            "htmlDir": "docs/post/My Blog.html",
            "labels": [
                "documentation"
            ],
            "postTitle": "My Blog",
            "postUrl": "post/My%20Blog.html",
            "postSourceUrl": "https://github.com/oGazen/ogazen.github.io/issues/1",
            "commentNum": 1,
            "wordCount": 24,
            "description": "Thank For Gmeek Template\u3002",
            "top": 0,
            "createdAt": 1758265649,
            "style": "",
            "script": "",
            "head": "",
            "ogImage": "https://avatars.githubusercontent.com/u/68213482?v=4",
            "createdDate": "2025-09-19",
            "dateLabelColor": "#0969da"
        },
        "P2": {
            "htmlDir": "docs/post/ShaderLab -shu-xue-han-shu.html",
            "labels": [
                "documentation"
            ],
            "postTitle": "ShaderLab \u6570\u5b66\u51fd\u6570",
            "postUrl": "post/ShaderLab%20-shu-xue-han-shu.html",
            "postSourceUrl": "https://github.com/oGazen/ogazen.github.io/issues/2",
            "commentNum": 0,
            "wordCount": 5940,
            "description": "### \u4fee\u9970\u7b26\n\n| **\u4fee\u9970\u7b26** | **\u89e3\u6790**                                                     |\n| :--------: | :----------------------------------------------------------- |\n|   const    | \u53d8\u91cf\u88ab\u5b9a\u4e49\u6210\u5e38\u91cf\u7684\u8bdd\uff0c\u5728\u7a0b\u5e8f\u4e2d\uff0c\u5c31\u4e0d\u80fd\u518d\u5bf9\u8be5\u53d8\u91cf\u8d4b\u503c\uff0c\u9664\u975econst\u548cuniform\uff0cvarying\u4e00\u8d77\u4f7f\u7528\u3002",
            "top": 0,
            "createdAt": 1758531858,
            "style": "",
            "script": "<script>MathJax = {tex: {inlineMath: [[\"$\", \"$\"]]}};</script><script async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>",
            "head": "",
            "ogImage": "https://avatars.githubusercontent.com/u/68213482?v=4",
            "createdDate": "2025-09-22",
            "dateLabelColor": "#0969da"
        },
        "P3": {
            "htmlDir": "docs/post/mo-ni-ping-mian-shui-\uff08Beta\uff09.html",
            "labels": [
                "Unity",
                "Shader",
                "URP"
            ],
            "postTitle": "\u6a21\u62df\u5e73\u9762\u6c34\uff08Beta\uff09",
            "postUrl": "post/mo-ni-ping-mian-shui-%EF%BC%88Beta%EF%BC%89.html",
            "postSourceUrl": "https://github.com/oGazen/ogazen.github.io/issues/3",
            "commentNum": 0,
            "wordCount": 23516,
            "description": "### \u5e73\u9762\u6c34shader\n\n<details open>\n    <summary>WaterPanel</summary>\n\n```hlsl\nShader 'URP/WaterPanel'\n{\n    Properties\n    {\n        [MainTexture]_MainTex ('Texture', 2D) = 'white' {}\n        [MainColor]_Color ('Color',Color) = (1,1,1,1)\n\n        // \u7b2c\u4e00\u6b65\n        [Header(Depth And Color)]\n        [Space()]\n        _DepthIntensity ('Depth Intensity',Range(0,1)) = 0.05\n        _EdgeColor ('Edge Color',Color) = (1,1,1,1)\n        _WaterColor ('Water Color',Color) = (1,1,1,1)\n\n        // \u7b2c\u4e8c\u6b65 \u6cd5\u7ebf\u8d34\u56fe\n        [Header(Normal Texture)]\n        [Space()]\n        _NormalTex('Normal Texture',2D) = 'white' {}\n        _FlowSpeed('Flow Speed',Float) = 1\n        _NormalMixture('Normal Mixture',Float) = 1\n\n\n        // \u7b2c\u4e09\u6b65 \u9ad8\u5149\n        [Header(Specular Color)]\n        [Space()]\n        _SpecularColor('Specular Color',Color)=(1,1,1,1)\n        _SpecularIntensity('Specular Intensity',float)=1\n        _Shininess('Shininess',float)=1\n\n\n        // \u7b2c\u56db\u6b65 \u53cd\u5c04 CubeMap\n        [Header(Reflect Texture)]\n        [Space()]\n        _ReflectTex2('ReflectTex2',2D) = 'white' {}\n        _ReflectMixture('Reflect Mixture',float)=1\n        _FresnelIntensity('Fresnel Intensity',float)=1\n\n\n\n        // \u7b2c\u4e94\u6b65 \u6c34\u4e0b\u6298\u5c04\u626d\u66f2\n        [Header(Distort Texture)]\n        [Space()]\n        _DistortTex('DistortTex',2D) = 'white'{}\n        _Refract_X('Refract_X',float)=1\n        _Refract_Y('Refract_Y',float)=1\n        _DistortIntensity('Distort Intensity',float)=0 //\u6298\u5c04\u7eb9\u7406\u7684\u626d\u66f2\u5f3a\u5ea6\n\n\n        // \u7b2c\u516d\u6b65 \u6c34\u4e0b\u7126\u6563\n        [Header(Caustic Texture)]\n        [Space()]\n        _CausticTex('CausticTex',2D)='white'{}\n        _OffsetY('Caustic OffsetY',float)=1\n        _CausticIntensity('Caustic Intensity',float)=1\n\n\n        // \u7b2c\u4e03\u6b65 \u6c34\u9762\u6ce1\u6cab\n        [Header(Foam Texture)]\n        [Space()]\n        _FoamTex('FoamTex',2D)='white'{}\n        _FoamColor('Foam Color',Color)=(1,1,1,1)\n        _FoamNoise('FoamNoise',float)=1\n        _FoamMultiplier('Foam Multiplier',Float) = 1\n    }\n    SubShader\n    {\n        Tags\n        {\n            'RenderType'='Transparent'\n            'RenderPipeline'='UniversalRenderPipeline'\n            'IgnoreProjector'='true'\n            'Queue'='Transparent' // Transparent AlphaTest Geometry Background\n        }\n        LOD 100\n\n        Pass\n        {\n            HLSLPROGRAM\n\n\n            #include 'Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl'\n            #include 'Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl'\n            // #include 'Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl'\n            // #include 'Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareOpaqueTexture.hlsl'\n\n            #pragma vertex Vert\n            #pragma fragment Frag\n\n\n\n            TEXTURE2D_X(_MainTex);\n            TEXTURE2D_X(_NormalTex);\n            TEXTURE2D_X(_ReflectTex2);\n            TEXTURE2D_X(_DistortTex);\n            TEXTURE2D_X(_CausticTex);\n            TEXTURE2D_X(_FoamTex);\n\n            TEXTURE2D_X(_CameraDepthTexture);\n            TEXTURE2D_X(_CameraOpaqueTexture);\n            SAMPLER(sampler_MainTex);\n\n            CBUFFER_START(UnityPerMaterial)\n            half4 _Color;\n            half4 _MainTex_ST;\n\n            // \u7b2c\u4e00\u6b65\n            half _DepthIntensity;\n            half4 _EdgeColor;\n            half4 _WaterColor;\n\n            // \u7b2c\u4e8c\u6b65\n            half4 _NormalTex_ST;\n            half _FlowSpeed;\n            half _NormalMixture;\n\n            // \u7b2c\u4e09\u6b65\n            half4 _SpecularColor;\n            half _SpecularIntensity;\n            half _Shininess;\n\n            // \u7b2c\u56db\u6b65\n            half _ReflectMixture;\n            half _FresnelIntensity;\n            half4 _ReflectTex2_ST;\n\n\n            // \u7b2c\u4e94\u6b65\n            half4 _DistortTex_ST;\n            half _Refract_X;\n            half _Refract_Y;\n            half _DistortIntensity;\n\n\n            // \u7b2c\u516d\u6b65\n            half4 _CausticTex_ST;\n            half _OffsetY;\n            half _CausticIntensity;\n\n\n            // \u7b2c\u4e03\u6b65\n            half4 _FoamTex_ST;\n            half4 _FoamColor;\n            half _FoamNoise;\n            half _FoamMultiplier;\n            CBUFFER_END\n\n\n            struct Attributes\n            {\n                half4 position : POSITION;\n                half2 uv : TEXCOORD0;\n\n                // \u7b2c\u4e8c\u6b65\n                half4 normalUV : TEXCOORD1;\n                half3 normal : NORMAL;\n            };\n\n\n            struct Varyings\n            {\n                half4 positionHCS : SV_POSITION;\n                half2 uv : TEXCOORD0;\n\n                // \u7b2c\u4e00\u6b65\n                half3 positionView : TEXCOORD1;\n                half3 positionWorld : TEXCOORD2;\n\n\n                // \u7b2c\u4e8c\u6b65\n                half4 normalUV : TEXCOORD3;\n                half3 normalWorld : TEXCOORD4;\n\n                // \u8865\u4e01\n                half4 screenPos : TEXCOORD5;\n            };\n\n\n            Varyings Vert(Attributes IN)\n            {\n                Varyings OUT;\n                // \u7b2c\u4e00\u6b65\n                OUT.positionHCS = TransformObjectToHClip(IN.position);\n                OUT.positionWorld = TransformObjectToWorld(IN.position);\n                OUT.positionView = TransformWorldToView(OUT.positionWorld);\n\n                // \u7b2c\u4e8c\u6b65\n                OUT.normalWorld = TransformObjectToWorldNormal(IN.normal);\n                const half2 _mul1 = half2(1,1);\n                const half2 _mul2 = half2(-1.15,0.8);\n                OUT.normalUV.xy = TRANSFORM_TEX(IN.normalUV,_NormalTex) + _Time.y * _FlowSpeed * _mul1;\n                OUT.normalUV.zw = TRANSFORM_TEX(IN.normalUV,_NormalTex) + _Time.y * _FlowSpeed * _mul2;\n                OUT.uv = TRANSFORM_TEX(IN.uv,_FoamTex) + _Time.y * _FlowSpeed;\n\n                // \u8865\u4e01\n                OUT.screenPos = ComputeScreenPos(OUT.positionHCS);\n\n                return OUT;\n            }\n\n\n\n            half4 Frag(Varyings IN) : SV_Target\n            {\n                /* \u7b2c\u4e00\u6b65 */\n                //\u6839\u636e\u6df1\u5ea6\u5dee\u8bbe\u7f6e\u6c34\u9762\u989c\u8272\n                half2 ScreenUV = IN.positionHCS.xy / _ScreenParams.xy; //\u5c4f\u5e55UV\n                half4 depthTex = SAMPLE_TEXTURE2D(_CameraDepthTexture,sampler_MainTex,ScreenUV); //\u91c7\u6837\u6df1\u5ea6\u56fe\n                half depth_eye = LinearEyeDepth(depthTex,_ZBufferParams); //\u5c06\u6df1\u5ea6\u7eb9\u7406\u7684\u6df1\u5ea6\u503c\u8f6c\u6362\u5230\u89c6\u56fe\u7a7a\u95f4\n                //\uff08\u6b64\u65f6\u6c34\u4f53\u9762\u7247\u4e0d\u6e32\u67d3\u5230\u6df1\u5ea6\u56fe\u4e2d\uff09\u7528\u6df1\u5ea6\u56fe\u4e2d\u7684\u6df1\u5ea6\u503c\u4e0e\u6c34\u4f53\u9762\u7247\u7684\u5728\u89c6\u56fe\u7a7a\u95f4\u7684\u6df1\u5ea6\u503c\u505a\u5dee\u503c\uff0c\u4e24\u8005\u4ea4\u63a5\u5904\u989c\u8272\u4e3a0\n                half depth_eye_viewZ = depth_eye + IN.positionView.z; //i.positionVS.z\u4e3a\u8d1f\u503c\uff0c\u505a\u5dee\u503c\u65f6\u9700\u4e24\u8005\u76f8\u52a0\n                //_depthIntensity\u7528\u4e8e\u8c03\u8282\u6df1\u5ea6\u5dee\u53d8\u5316\n                half depthDifference = saturate( depth_eye_viewZ * _DepthIntensity ); \n                //\u6c34\u9762\u989c\u8272\n                half4 col = lerp(_EdgeColor,_WaterColor,depthDifference);\n                // return col;\n\n\n\n                /* \u7b2c\u4e8c\u6b65 */\n                //\u6c34\u9762\u6cd5\u7ebf\n                //\u5229\u7528\u4e24\u4e2a\u6d41\u52a8\u4e0d\u540c\u65b9\u5411\u7684normalUV\u6765\u91c7\u6837\u6cd5\u7ebf\u7eb9\u7406\uff0c\u6700\u540e\u5c06\u4e24\u8005\u6df7\u5408\uff0c\u505a\u51fa\u6c34\u9762\u6d41\u52a8\u7684\u6548\u679c\n                half4 NormalTex01 = SAMPLE_TEXTURE2D(_NormalTex,sampler_MainTex,IN.normalUV.xy);\n                half4 NormalTex02 = SAMPLE_TEXTURE2D(_NormalTex,sampler_MainTex,IN.normalUV.zw);\n                half4 normalCalc = NormalTex01 * NormalTex02;\n                // return col + normalCalc;\n\n\n                /* \u7b2c\u4e09\u6b65 */\n                //\u6c34\u9762\u9ad8\u5149\n                //\u5229\u7528_NormalMixture\u6765\u6df7\u5408\u6a21\u578b\u672c\u8eab\u6cd5\u7ebf\u548c\u6cd5\u7ebf\u7eb9\u7406\n                half3 N = normalize(lerp(IN.normalWorld,normalCalc,_NormalMixture));\n                Light light = GetMainLight();\n                half3 L = light.direction; // \u770b\u5411\u706f\u5149\u65b9\u5411\n                half3 V = normalize(_WorldSpaceCameraPos - IN.positionWorld); // \u770b\u5411\u6444\u50cf\u673a\n                half3 H = normalize(L+V); // L \u548c V \u7684\u4e2d\u95f4\u5411\u91cf\n                half4 Specular = _SpecularColor * _SpecularIntensity * pow(max(0,dot(N,H)),_Shininess);\n                // return Specular + col;\n\n\n\n                /* \u7b2c\u56db\u6b65 */\n                //\u6c34\u9762\u53cd\u5c04\u4ee5\u53ca\u83f2\u5c3c\u5c14\n                //\u5229\u7528_ReflectMixture\u6765\u63a7\u5236\u6cd5\u7ebf\u53d6\u503c\uff0c\u4e0e\u4e0a\u4e00\u6b65\u5236\u4f5c\u9ad8\u5149\u7684\u6cd5\u7ebf\u503c\u533a\u5206\n                half3 N1 = normalize( lerp(IN.normalWorld,normalCalc,_ReflectMixture) );\n                // \u901a\u8fc7Schlick\u8fd1\u4f3c\u83f2\u6d85\u5c14\u51fd\u6570\u6743\u91cd\u53d6\u6298\u5c04\u548c\u53cd\u5c04\u91c7\u6837 \u7a7a\u6c14\u6298\u5c04\u73871 \u6c34\u6298\u5c04\u73871.333\n                half Fresnel2 = pow(1 - saturate(dot(V, N1)), _FresnelIntensity);\n                // return ReflectTex2;\n\n\n\n                /* \u7b2c\u4e94\u6b65 */\n                //\u6c34\u4e0b\u7684\u6298\u5c04\u626d\u66f2\n                //\u5229\u7528\u6c34\u4f53\u9762\u7247\u7684\u4e16\u754c\u7a7a\u95f4\u4e0b\u5750\u6807\u91c7\u6837\u7528\u4e8e\u626d\u66f2\u6c34\u4e0b\u7684\u7eb9\u7406\n                half3 DistortTex = UnpackNormal(SAMPLE_TEXTURE2D(_DistortTex,sampler_MainTex,IN.positionWorld.xz * half2(_Refract_X,_Refract_Y)+_Time.y));\n                //\u504f\u79fb\u503c _DistortIntensity\u4e3a\u626d\u66f2\u5f3a\u5ea6\u503c\n                half2 offset = DistortTex.xy * _DistortIntensity;\n                //\u626d\u66f2UV\u503c\n                half2 DistortUV = ScreenUV + offset; \n                //\u5229\u7528\u626d\u66f2\u540e\u7684\u5c4f\u5e55UV\u91c7\u6837\u6df1\u5ea6\u56fe\n                half DistortDepth = SAMPLE_TEXTURE2D(_CameraDepthTexture,sampler_MainTex,DistortUV);\n                //\u5c06\u6df1\u5ea6\u56fe\u4e2d\u7684\u6df1\u5ea6\u4fe1\u606f\u8f6c\u6362\u5230\u89c6\u56fe\u7a7a\u95f4\n                DistortDepth = LinearEyeDepth(DistortDepth,_ZBufferParams);\n                //\u8ba1\u7b97\u6df1\u5ea6\u56fe\u548c\u6c34\u4f53\u9762\u7247\u5728\u89c6\u56fe\u7a7a\u95f4\u4e2d\u7684\u6df1\u5ea6\u5dee\uff08i.positionVS.z\u4e3a\u8d1f\u503c\uff0c\u6240\u4ee5\u4e24\u8005\u8981\u76f8\u52a0\uff09\n                half DistDepthDifferent = saturate(DistortDepth + IN.positionView.z);\n                //\u6d88\u9664\u6c34\u9762\u4ee5\u4e0a\u7269\u4f53\u7684\u626d\u66f2\uff0c\u56e0\u4e3a\u6c34\u9762\u4ee5\u4e0a\u7269\u4f53\u7684\u6df1\u5ea6\u503c\u5c0f\u4e8ei.positionVS.z,\u6240\u4ee5DistDepthDifferent\u503c\u4e3a\u8d1f\u65f6\uff0c\u4f7f\u6c34\u9762\u4ee5\u4e0a\u7269\u4f53\u91c7\u6837\u5c4f\u5e55\u7eb9\u7406\u7684UV\u4e3a\u5c4f\u5e55UV(\u4e0d\u8fdb\u884c\u626d\u66f2)\n                if(!all(DistDepthDifferent)) DistortUV = ScreenUV;\n                //\u6700\u540e\u5229\u7528\u4e0a\u9762\u8ba1\u7b97\u5f97\u5230\u7684UV\u6765\u91c7\u6837\u5c4f\u5e55\u7eb9\u7406\n                half4 RefractTex = SAMPLE_TEXTURE2D(_CameraOpaqueTexture,sampler_MainTex,DistortUV);\n                half4 ReflectTex2 = SAMPLE_TEXTURE2D(_ReflectTex2,sampler_MainTex,DistortUV);\n                half4 refract_reflect = ReflectTex2 * Fresnel2 + RefractTex * (1-Fresnel2);\n\n\n\n\n\n\n                /* \u7b2c\u516d\u6b65 */\n                //\u6c34\u4e0b\u7684\u7126\u6563\n                //\u56e0\u4e3a\u7126\u6563\u7eb9\u7406\u9700\u8981\u5904\u4e8e\u6c34\u5e95\uff0c\u800c\u6211\u4eec\u53ea\u80fd\u4f7f\u7528\u6c34\u4f53\u9762\u7247\u6765\u91c7\u6837\u7126\u6563\u7eb9\u7406\u3002",
            "top": 0,
            "createdAt": 1758786815,
            "style": "",
            "script": "",
            "head": "",
            "ogImage": "https://avatars.githubusercontent.com/u/68213482?v=4",
            "createdDate": "2025-09-25",
            "dateLabelColor": "#0969da"
        }
    },
    "singeListJson": {},
    "labelColorDict": {
        "bug": "#d73a4a",
        "documentation": "#0075ca",
        "duplicate": "#cfd3d7",
        "enhancement": "#a2eeef",
        "good first issue": "#7057ff",
        "help wanted": "#008672",
        "invalid": "#e4e669",
        "question": "#d876e3",
        "Shader": "#c7a8f1",
        "Unity": "#111530",
        "URP": "#055e53",
        "wontfix": "#ffffff"
    },
    "displayTitle": "Gazen\u7684\u4e2a\u4eba\u535a\u5ba2",
    "faviconUrl": "https://avatars.githubusercontent.com/u/68213482?v=4",
    "ogImage": "https://avatars.githubusercontent.com/u/68213482?v=4",
    "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />",
    "homeUrl": "https://ogazen.github.io",
    "prevUrl": "disabled",
    "nextUrl": "disabled"
}